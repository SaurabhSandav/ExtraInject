package com.redridgeapps.extrainject.processor.util

import com.redridgeapps.extrainject.processor.dependency.DependencyRequest
import com.redridgeapps.extrainject.processor.dependency.Key
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.CodeBlock
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.ParameterizedTypeName
import com.squareup.javapoet.TypeName
import com.squareup.javapoet.TypeSpec

typealias JFBuilder = JavaFile.Builder
typealias TSBuilder = TypeSpec.Builder
typealias MSBuilder = MethodSpec.Builder

/** True when this key represents a parameterized JSR 330 `Provider`. */
val Key.isProvider get() = type is ParameterizedTypeName && type.rawType == JAVAX_PROVIDER

fun DependencyRequest.asProviderType(): TypeName {
    val type = when {
        key.isProvider -> key.type // Do not wrap a Provider inside another Provider.
        else -> ParameterizedTypeName.get(JAVAX_PROVIDER, key.type.box())
    }

    val qualifier = key.qualifier

    return if (qualifier != null) type.annotated(qualifier) else type
}

fun DependencyRequest.provideArguments(): CodeBlock {
    return CodeBlock.of(if (isExtra || key.isProvider) "\$N" else "\$N.get()", name)
}

fun ClassName.assistedInjectFactoryName(): ClassName = peerClassWithReflectionNesting(simpleName() + "Factory")

inline fun <reified T> JFBuilder.addDefaultFileComment(): JavaFile.Builder {
    return addFileComment("Generated by @${T::class.java.simpleName}. Do not modify!")
}
